name: Test DLC Frontend CI
on: [push, workflow_dispatch, pull_request]
jobs:
  telegram-notify:
    name: Send Telegram notification
    runs-on: ubuntu-latest
    steps:
      - name: send telegram message on push
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}
            Repository: ${{ github.repository }}
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
  install-cache:
    name: Install cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-ci.outputs.key }}
    steps:
      - name: Get the repository code
        uses: actions/checkout@v5
      - name: Set cache key
        id: cache-ci
        run: echo "key=node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache ci dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ steps.cache-ci.outputs.key }}
  eslint-check:
    name: Eslint check
    runs-on: ubuntu-latest
    needs: ['install-cache']
    steps:
      - name: Get the repository code
        uses: actions/checkout@v5
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ needs.install-cache.outputs.cache-key }}
      - name: Install dependencies
        run: npm ci
      - name: Run eslint check
        run: npm run eslint:fix
  prettier-check:
    name: Prettier check
    runs-on: ubuntu-latest
    needs: ['install-cache']
    steps:
      - name: Get the repository code
        uses: actions/checkout@v5
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ needs.install-cache.outputs.cache-key }}
      - name: Install dependencies
        run: npm ci
      - name: Run prettier fix
        run: npm run prettier:fix
  typescript-check:
    name: TypeScript check
    needs: ['install-cache']
    runs-on: ubuntu-latest
    steps:
      - name: Get the repository code
        uses: actions/checkout@v5
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ needs.install-cache.outputs.cache-key }}
      - name: Install dependencies
        run: npm ci
      - name: Run TypeScript check
        run: npm run ts:check

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - install-cache
      - eslint-check
      - prettier-check
      - typescript-check
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: –°–æ–∑–¥–∞–Ω–∏–µ env —Ñ–∞–π–ª–∞
        run: |
          touch .env
          echo NEXT_PUBLIC_API_URL=http://109.120.190.243:8001/api >> .env
          cat .env

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .next/
            package.json
          retention-days: 1
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ./

      - name: Clean server directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Creating and cleaning /var/www/dlc directory..."
            sudo mkdir -p /var/www/dlc
            sudo chown -R ubuntu:ubuntu /var/www/dlc
            sudo rm -rf /var/www/dlc/*
            echo "Directory prepared successfully"

      - name: Deploy to server via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: '.next,package.json'
          target: '/var/www/dlc'
          overwrite: true

      - name: Install dependencies and start on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node.js –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if ! command -v node &> /dev/null; then
              echo "Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Node.js
            echo "Node.js version: $(node --version)"
            echo "NPM version: $(npm --version)"

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PM2 –≥–ª–æ–±–∞–ª—å–Ω–æ
            npm install -g pm2

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
            cd /var/www/dlc

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            npm ci --production

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º PM2 –ø—Ä–æ—Ü–µ—Å—Å
            pm2 restart dlc || pm2 start npm --name "dlc" -- start

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å PM2
            pm2 list
  notify_success:
    name: Success Message
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram Success Message
        uses: PacificPromise/macos-telegram-action@main
        with:
          type: topic
          message: |
            ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω—ã

            üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–¥ üîó
            ${{ secrets.SERVER_HOST || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' }}

  notify_failure:
    name: Failure Message
    if: ${{ needs.deploy.result == 'failure' }}
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Failure Message
        uses: PacificPromise/macos-telegram-action@main
        with:
          type: topic
          message: |
            ‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–ø–ª–æ—è

            üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–π–ø–ª–∞–π–Ω üîó
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
